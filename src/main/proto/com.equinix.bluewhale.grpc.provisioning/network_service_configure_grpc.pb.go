// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: network_service_configure.proto

package com_equinix_bluewhale_grpc_provisioning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Configure_Configure_FullMethodName             = "/Configure/Configure"
	Configure_ConfigureAndSubscribe_FullMethodName = "/Configure/ConfigureAndSubscribe"
	Configure_UpdateConfigStatus_FullMethodName    = "/Configure/UpdateConfigStatus"
	Configure_ConfigStatus_FullMethodName          = "/Configure/ConfigStatus"
	Configure_ReplaceConfiguration_FullMethodName  = "/Configure/ReplaceConfiguration"
	Configure_DriftDetect_FullMethodName           = "/Configure/DriftDetect"
	Configure_InstanceDriftDetect_FullMethodName   = "/Configure/InstanceDriftDetect"
	Configure_JournalOnly_FullMethodName           = "/Configure/JournalOnly"
)

// ConfigureClient is the client API for Configure service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigureClient interface {
	// Main entrypoint for instance network configuration requests.
	//
	// Restriction on subfields interface_a / interface_b (in ConfigurationRequest.instance_config.network_modes.*):
	//
	// 1. Do not change device_hostname field between the calls to this rpc (even when it's a letter capitalization
	// or conversion to/from fully qualified domain name).
	//
	// 2. If there is a Configuration already applied on the same combination of interface_a.device_hostname
	// and interface_a.name as this call has, the current call should retain also the same interface_b.device_hostname
	// and interface_b.name (i.e. interface_a and interface_b are now permanently bundled).
	// To switch to a different interface_b you must first configure UnenrolledMode. Such Configuration, if applied,
	// unbundles interface_b from interface_a, and allows the subsequent call to freely change interface_b.
	Configure(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error)
	// Same as Configure followed by ConfigStatus.
	ConfigureAndSubscribe(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (Configure_ConfigureAndSubscribeClient, error)
	// Add an additional entry to the journal, given a config_id to update the status of that configuration sequence
	UpdateConfigStatus(ctx context.Context, in *UpdateConfigStatusRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error)
	// Use UUID returned in ConfigStatusMessage to subscribe to stream of status updates
	ConfigStatus(ctx context.Context, in *ConfigStatusRequest, opts ...grpc.CallOption) (Configure_ConfigStatusClient, error)
	// Primarily for use between controller and agent,
	// sends current configuration and new configuration so agent can generate the necessary config to change / replace
	ReplaceConfiguration(ctx context.Context, in *ReplaceConfigRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error)
	// Determines if the switch config matches the intended state
	DriftDetect(ctx context.Context, in *DriftDetectRequest, opts ...grpc.CallOption) (*DriftDetectResponse, error)
	// Determines if the instance's config matches the intended state
	InstanceDriftDetect(ctx context.Context, in *InstanceDriftDetectRequest, opts ...grpc.CallOption) (*DriftDetectResponse, error)
	// Same as Configure but does not alter anything on network switches. Stores request in the database as the current
	// configuration. It is the caller's responsibility to have it applied onto the network switches.
	JournalOnly(ctx context.Context, in *JournalOnlyRequest, opts ...grpc.CallOption) (*JournalOnlyResponse, error)
}

type configureClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigureClient(cc grpc.ClientConnInterface) ConfigureClient {
	return &configureClient{cc}
}

func (c *configureClient) Configure(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error) {
	out := new(ConfigStatusMessage)
	err := c.cc.Invoke(ctx, Configure_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) ConfigureAndSubscribe(ctx context.Context, in *ConfigurationRequest, opts ...grpc.CallOption) (Configure_ConfigureAndSubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Configure_ServiceDesc.Streams[0], Configure_ConfigureAndSubscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configureConfigureAndSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Configure_ConfigureAndSubscribeClient interface {
	Recv() (*ConfigStatusMessage, error)
	grpc.ClientStream
}

type configureConfigureAndSubscribeClient struct {
	grpc.ClientStream
}

func (x *configureConfigureAndSubscribeClient) Recv() (*ConfigStatusMessage, error) {
	m := new(ConfigStatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configureClient) UpdateConfigStatus(ctx context.Context, in *UpdateConfigStatusRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error) {
	out := new(ConfigStatusMessage)
	err := c.cc.Invoke(ctx, Configure_UpdateConfigStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) ConfigStatus(ctx context.Context, in *ConfigStatusRequest, opts ...grpc.CallOption) (Configure_ConfigStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &Configure_ServiceDesc.Streams[1], Configure_ConfigStatus_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &configureConfigStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Configure_ConfigStatusClient interface {
	Recv() (*ConfigStatusMessage, error)
	grpc.ClientStream
}

type configureConfigStatusClient struct {
	grpc.ClientStream
}

func (x *configureConfigStatusClient) Recv() (*ConfigStatusMessage, error) {
	m := new(ConfigStatusMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *configureClient) ReplaceConfiguration(ctx context.Context, in *ReplaceConfigRequest, opts ...grpc.CallOption) (*ConfigStatusMessage, error) {
	out := new(ConfigStatusMessage)
	err := c.cc.Invoke(ctx, Configure_ReplaceConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) DriftDetect(ctx context.Context, in *DriftDetectRequest, opts ...grpc.CallOption) (*DriftDetectResponse, error) {
	out := new(DriftDetectResponse)
	err := c.cc.Invoke(ctx, Configure_DriftDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) InstanceDriftDetect(ctx context.Context, in *InstanceDriftDetectRequest, opts ...grpc.CallOption) (*DriftDetectResponse, error) {
	out := new(DriftDetectResponse)
	err := c.cc.Invoke(ctx, Configure_InstanceDriftDetect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configureClient) JournalOnly(ctx context.Context, in *JournalOnlyRequest, opts ...grpc.CallOption) (*JournalOnlyResponse, error) {
	out := new(JournalOnlyResponse)
	err := c.cc.Invoke(ctx, Configure_JournalOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigureServer is the server API for Configure service.
// All implementations must embed UnimplementedConfigureServer
// for forward compatibility
type ConfigureServer interface {
	// Main entrypoint for instance network configuration requests.
	//
	// Restriction on subfields interface_a / interface_b (in ConfigurationRequest.instance_config.network_modes.*):
	//
	// 1. Do not change device_hostname field between the calls to this rpc (even when it's a letter capitalization
	// or conversion to/from fully qualified domain name).
	//
	// 2. If there is a Configuration already applied on the same combination of interface_a.device_hostname
	// and interface_a.name as this call has, the current call should retain also the same interface_b.device_hostname
	// and interface_b.name (i.e. interface_a and interface_b are now permanently bundled).
	// To switch to a different interface_b you must first configure UnenrolledMode. Such Configuration, if applied,
	// unbundles interface_b from interface_a, and allows the subsequent call to freely change interface_b.
	Configure(context.Context, *ConfigurationRequest) (*ConfigStatusMessage, error)
	// Same as Configure followed by ConfigStatus.
	ConfigureAndSubscribe(*ConfigurationRequest, Configure_ConfigureAndSubscribeServer) error
	// Add an additional entry to the journal, given a config_id to update the status of that configuration sequence
	UpdateConfigStatus(context.Context, *UpdateConfigStatusRequest) (*ConfigStatusMessage, error)
	// Use UUID returned in ConfigStatusMessage to subscribe to stream of status updates
	ConfigStatus(*ConfigStatusRequest, Configure_ConfigStatusServer) error
	// Primarily for use between controller and agent,
	// sends current configuration and new configuration so agent can generate the necessary config to change / replace
	ReplaceConfiguration(context.Context, *ReplaceConfigRequest) (*ConfigStatusMessage, error)
	// Determines if the switch config matches the intended state
	DriftDetect(context.Context, *DriftDetectRequest) (*DriftDetectResponse, error)
	// Determines if the instance's config matches the intended state
	InstanceDriftDetect(context.Context, *InstanceDriftDetectRequest) (*DriftDetectResponse, error)
	// Same as Configure but does not alter anything on network switches. Stores request in the database as the current
	// configuration. It is the caller's responsibility to have it applied onto the network switches.
	JournalOnly(context.Context, *JournalOnlyRequest) (*JournalOnlyResponse, error)
	mustEmbedUnimplementedConfigureServer()
}

// UnimplementedConfigureServer must be embedded to have forward compatible implementations.
type UnimplementedConfigureServer struct {
}

func (UnimplementedConfigureServer) Configure(context.Context, *ConfigurationRequest) (*ConfigStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedConfigureServer) ConfigureAndSubscribe(*ConfigurationRequest, Configure_ConfigureAndSubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigureAndSubscribe not implemented")
}
func (UnimplementedConfigureServer) UpdateConfigStatus(context.Context, *UpdateConfigStatusRequest) (*ConfigStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigStatus not implemented")
}
func (UnimplementedConfigureServer) ConfigStatus(*ConfigStatusRequest, Configure_ConfigStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method ConfigStatus not implemented")
}
func (UnimplementedConfigureServer) ReplaceConfiguration(context.Context, *ReplaceConfigRequest) (*ConfigStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceConfiguration not implemented")
}
func (UnimplementedConfigureServer) DriftDetect(context.Context, *DriftDetectRequest) (*DriftDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DriftDetect not implemented")
}
func (UnimplementedConfigureServer) InstanceDriftDetect(context.Context, *InstanceDriftDetectRequest) (*DriftDetectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstanceDriftDetect not implemented")
}
func (UnimplementedConfigureServer) JournalOnly(context.Context, *JournalOnlyRequest) (*JournalOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JournalOnly not implemented")
}
func (UnimplementedConfigureServer) mustEmbedUnimplementedConfigureServer() {}

// UnsafeConfigureServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigureServer will
// result in compilation errors.
type UnsafeConfigureServer interface {
	mustEmbedUnimplementedConfigureServer()
}

func RegisterConfigureServer(s grpc.ServiceRegistrar, srv ConfigureServer) {
	s.RegisterService(&Configure_ServiceDesc, srv)
}

func _Configure_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).Configure(ctx, req.(*ConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_ConfigureAndSubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigurationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigureServer).ConfigureAndSubscribe(m, &configureConfigureAndSubscribeServer{stream})
}

type Configure_ConfigureAndSubscribeServer interface {
	Send(*ConfigStatusMessage) error
	grpc.ServerStream
}

type configureConfigureAndSubscribeServer struct {
	grpc.ServerStream
}

func (x *configureConfigureAndSubscribeServer) Send(m *ConfigStatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Configure_UpdateConfigStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).UpdateConfigStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_UpdateConfigStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).UpdateConfigStatus(ctx, req.(*UpdateConfigStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_ConfigStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConfigStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConfigureServer).ConfigStatus(m, &configureConfigStatusServer{stream})
}

type Configure_ConfigStatusServer interface {
	Send(*ConfigStatusMessage) error
	grpc.ServerStream
}

type configureConfigStatusServer struct {
	grpc.ServerStream
}

func (x *configureConfigStatusServer) Send(m *ConfigStatusMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _Configure_ReplaceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplaceConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).ReplaceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_ReplaceConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).ReplaceConfiguration(ctx, req.(*ReplaceConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_DriftDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DriftDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).DriftDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_DriftDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).DriftDetect(ctx, req.(*DriftDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_InstanceDriftDetect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstanceDriftDetectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).InstanceDriftDetect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_InstanceDriftDetect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).InstanceDriftDetect(ctx, req.(*InstanceDriftDetectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Configure_JournalOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JournalOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigureServer).JournalOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Configure_JournalOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigureServer).JournalOnly(ctx, req.(*JournalOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Configure_ServiceDesc is the grpc.ServiceDesc for Configure service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Configure_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Configure",
	HandlerType: (*ConfigureServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Configure_Configure_Handler,
		},
		{
			MethodName: "UpdateConfigStatus",
			Handler:    _Configure_UpdateConfigStatus_Handler,
		},
		{
			MethodName: "ReplaceConfiguration",
			Handler:    _Configure_ReplaceConfiguration_Handler,
		},
		{
			MethodName: "DriftDetect",
			Handler:    _Configure_DriftDetect_Handler,
		},
		{
			MethodName: "InstanceDriftDetect",
			Handler:    _Configure_InstanceDriftDetect_Handler,
		},
		{
			MethodName: "JournalOnly",
			Handler:    _Configure_JournalOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConfigureAndSubscribe",
			Handler:       _Configure_ConfigureAndSubscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConfigStatus",
			Handler:       _Configure_ConfigStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "network_service_configure.proto",
}
