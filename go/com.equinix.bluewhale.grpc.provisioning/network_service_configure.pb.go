// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.1
// source: network_service_configure.proto

package com_equinix_bluewhale_grpc_provisioning

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Status int32

const (
	Status_UNKNOWN    Status = 0
	Status_RECEIVED   Status = 1
	Status_VALIDATING Status = 2
	Status_APPLYING   Status = 3
	Status_SUCCEEDED  Status = 4
	Status_FAILED     Status = 5
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "RECEIVED",
		2: "VALIDATING",
		3: "APPLYING",
		4: "SUCCEEDED",
		5: "FAILED",
	}
	Status_value = map[string]int32{
		"UNKNOWN":    0,
		"RECEIVED":   1,
		"VALIDATING": 2,
		"APPLYING":   3,
		"SUCCEEDED":  4,
		"FAILED":     5,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{0}
}

type Tpid int32

const (
	Tpid_TPID_8100 Tpid = 0
	Tpid_TPID_9100 Tpid = 1
	Tpid_TPID_9200 Tpid = 2
)

// Enum value maps for Tpid.
var (
	Tpid_name = map[int32]string{
		0: "TPID_8100",
		1: "TPID_9100",
		2: "TPID_9200",
	}
	Tpid_value = map[string]int32{
		"TPID_8100": 0,
		"TPID_9100": 1,
		"TPID_9200": 2,
	}
)

func (x Tpid) Enum() *Tpid {
	p := new(Tpid)
	*p = x
	return p
}

func (x Tpid) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tpid) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[1].Descriptor()
}

func (Tpid) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[1]
}

func (x Tpid) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tpid.Descriptor instead.
func (Tpid) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{1}
}

type PortEncapsulation int32

const (
	PortEncapsulation_DOT1Q  PortEncapsulation = 0
	PortEncapsulation_DOT1AD PortEncapsulation = 1
)

// Enum value maps for PortEncapsulation.
var (
	PortEncapsulation_name = map[int32]string{
		0: "DOT1Q",
		1: "DOT1AD",
	}
	PortEncapsulation_value = map[string]int32{
		"DOT1Q":  0,
		"DOT1AD": 1,
	}
)

func (x PortEncapsulation) Enum() *PortEncapsulation {
	p := new(PortEncapsulation)
	*p = x
	return p
}

func (x PortEncapsulation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortEncapsulation) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[2].Descriptor()
}

func (PortEncapsulation) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[2]
}

func (x PortEncapsulation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortEncapsulation.Descriptor instead.
func (PortEncapsulation) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{2}
}

type ServiceType int32

const (
	ServiceType_MSP ServiceType = 0
	ServiceType_EPL ServiceType = 1
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0: "MSP",
		1: "EPL",
	}
	ServiceType_value = map[string]int32{
		"MSP": 0,
		"EPL": 1,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[3].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[3]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{3}
}

type Region int32

const (
	Region_AMER Region = 0
	Region_EMEA Region = 1
	Region_APAC Region = 2
	Region_BR   Region = 3
)

// Enum value maps for Region.
var (
	Region_name = map[int32]string{
		0: "AMER",
		1: "EMEA",
		2: "APAC",
		3: "BR",
	}
	Region_value = map[string]int32{
		"AMER": 0,
		"EMEA": 1,
		"APAC": 2,
		"BR":   3,
	}
)

func (x Region) Enum() *Region {
	p := new(Region)
	*p = x
	return p
}

func (x Region) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Region) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[4].Descriptor()
}

func (Region) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[4]
}

func (x Region) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Region.Descriptor instead.
func (Region) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{4}
}

type GeoScope int32

const (
	GeoScope_COUNTRY GeoScope = 0
)

// Enum value maps for GeoScope.
var (
	GeoScope_name = map[int32]string{
		0: "COUNTRY",
	}
	GeoScope_value = map[string]int32{
		"COUNTRY": 0,
	}
)

func (x GeoScope) Enum() *GeoScope {
	p := new(GeoScope)
	*p = x
	return p
}

func (x GeoScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GeoScope) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[5].Descriptor()
}

func (GeoScope) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[5]
}

func (x GeoScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GeoScope.Descriptor instead.
func (GeoScope) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{5}
}

type VnfType int32

const (
	VnfType_EM            VnfType = 0
	VnfType_CM            VnfType = 1
	VnfType_SDWAN         VnfType = 2
	VnfType_CM_CLUSTER    VnfType = 3
	VnfType_SDWAN_CLUSTER VnfType = 4
)

// Enum value maps for VnfType.
var (
	VnfType_name = map[int32]string{
		0: "EM",
		1: "CM",
		2: "SDWAN",
		3: "CM_CLUSTER",
		4: "SDWAN_CLUSTER",
	}
	VnfType_value = map[string]int32{
		"EM":            0,
		"CM":            1,
		"SDWAN":         2,
		"CM_CLUSTER":    3,
		"SDWAN_CLUSTER": 4,
	}
)

func (x VnfType) Enum() *VnfType {
	p := new(VnfType)
	*p = x
	return p
}

func (x VnfType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VnfType) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[6].Descriptor()
}

func (VnfType) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[6]
}

func (x VnfType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VnfType.Descriptor instead.
func (VnfType) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{6}
}

type Switchport_Speed int32

const (
	Switchport_UNKNOWN     Switchport_Speed = 0
	Switchport_SPEED_10GB  Switchport_Speed = 1
	Switchport_SPEED_25GB  Switchport_Speed = 2
	Switchport_SPEED_100GB Switchport_Speed = 3
)

// Enum value maps for Switchport_Speed.
var (
	Switchport_Speed_name = map[int32]string{
		0: "UNKNOWN",
		1: "SPEED_10GB",
		2: "SPEED_25GB",
		3: "SPEED_100GB",
	}
	Switchport_Speed_value = map[string]int32{
		"UNKNOWN":     0,
		"SPEED_10GB":  1,
		"SPEED_25GB":  2,
		"SPEED_100GB": 3,
	}
)

func (x Switchport_Speed) Enum() *Switchport_Speed {
	p := new(Switchport_Speed)
	*p = x
	return p
}

func (x Switchport_Speed) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Switchport_Speed) Descriptor() protoreflect.EnumDescriptor {
	return file_network_service_configure_proto_enumTypes[7].Descriptor()
}

func (Switchport_Speed) Type() protoreflect.EnumType {
	return &file_network_service_configure_proto_enumTypes[7]
}

func (x Switchport_Speed) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Switchport_Speed.Descriptor instead.
func (Switchport_Speed) EnumDescriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{2, 0}
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId  string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	HardwareId string `protobuf:"bytes,3,opt,name=hardware_id,json=hardwareId,proto3" json:"hardware_id,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{0}
}

func (x *Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Instance) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Instance) GetHardwareId() string {
	if x != nil {
		return x.HardwareId
	}
	return ""
}

type Switch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// Do not set (used internally between orca-controller and orca-agent).
	Loopback0Address string `protobuf:"bytes,2,opt,name=loopback0_address,json=loopback0Address,proto3" json:"loopback0_address,omitempty"`
	// The Switch's default local ASN
	Asn uint32 `protobuf:"varint,3,opt,name=asn,proto3" json:"asn,omitempty"`
}

func (x *Switch) Reset() {
	*x = Switch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switch) ProtoMessage() {}

func (x *Switch) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switch.ProtoReflect.Descriptor instead.
func (*Switch) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{1}
}

func (x *Switch) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Switch) GetLoopback0Address() string {
	if x != nil {
		return x.Loopback0Address
	}
	return ""
}

func (x *Switch) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

type Switchport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Do not set (used internally between orca-controller and orca-agent).
	Speed   Switchport_Speed `protobuf:"varint,3,opt,name=speed,proto3,enum=Switchport_Speed" json:"speed,omitempty"`
	Enabled bool             `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Switch  *Switch          `protobuf:"bytes,5,opt,name=switch,proto3" json:"switch,omitempty"`
}

func (x *Switchport) Reset() {
	*x = Switchport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Switchport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Switchport) ProtoMessage() {}

func (x *Switchport) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Switchport.ProtoReflect.Descriptor instead.
func (*Switchport) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{2}
}

func (x *Switchport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Switchport) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Switchport) GetSpeed() Switchport_Speed {
	if x != nil {
		return x.Speed
	}
	return Switchport_UNKNOWN
}

func (x *Switchport) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Switchport) GetSwitch() *Switch {
	if x != nil {
		return x.Switch
	}
	return nil
}

type VlanPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RackLocalVlanId uint32 `protobuf:"varint,1,opt,name=rack_local_vlan_id,json=rackLocalVlanId,proto3" json:"rack_local_vlan_id,omitempty"`
	CustomerVlanId  uint32 `protobuf:"varint,2,opt,name=customer_vlan_id,json=customerVlanId,proto3" json:"customer_vlan_id,omitempty"`
}

func (x *VlanPair) Reset() {
	*x = VlanPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VlanPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VlanPair) ProtoMessage() {}

func (x *VlanPair) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VlanPair.ProtoReflect.Descriptor instead.
func (*VlanPair) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{3}
}

func (x *VlanPair) GetRackLocalVlanId() uint32 {
	if x != nil {
		return x.RackLocalVlanId
	}
	return 0
}

func (x *VlanPair) GetCustomerVlanId() uint32 {
	if x != nil {
		return x.CustomerVlanId
	}
	return 0
}

type LegacyVlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *LegacyVlan) Reset() {
	*x = LegacyVlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegacyVlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegacyVlan) ProtoMessage() {}

func (x *LegacyVlan) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegacyVlan.ProtoReflect.Descriptor instead.
func (*LegacyVlan) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{4}
}

func (x *LegacyVlan) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Vlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Assignment:
	//	*Vlan_LegacyVlan
	//	*Vlan_VlanPair
	Assignment   isVlan_Assignment `protobuf_oneof:"assignment"`
	Vni          uint32            `protobuf:"varint,3,opt,name=vni,proto3" json:"vni,omitempty"`
	MetalGateway *MetalGateway     `protobuf:"bytes,4,opt,name=metal_gateway,json=metalGateway,proto3" json:"metal_gateway,omitempty"`
	VcfAttached  bool              `protobuf:"varint,5,opt,name=vcf_attached,json=vcfAttached,proto3" json:"vcf_attached,omitempty"`
}

func (x *Vlan) Reset() {
	*x = Vlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vlan) ProtoMessage() {}

func (x *Vlan) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vlan.ProtoReflect.Descriptor instead.
func (*Vlan) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{5}
}

func (m *Vlan) GetAssignment() isVlan_Assignment {
	if m != nil {
		return m.Assignment
	}
	return nil
}

func (x *Vlan) GetLegacyVlan() *LegacyVlan {
	if x, ok := x.GetAssignment().(*Vlan_LegacyVlan); ok {
		return x.LegacyVlan
	}
	return nil
}

func (x *Vlan) GetVlanPair() *VlanPair {
	if x, ok := x.GetAssignment().(*Vlan_VlanPair); ok {
		return x.VlanPair
	}
	return nil
}

func (x *Vlan) GetVni() uint32 {
	if x != nil {
		return x.Vni
	}
	return 0
}

func (x *Vlan) GetMetalGateway() *MetalGateway {
	if x != nil {
		return x.MetalGateway
	}
	return nil
}

func (x *Vlan) GetVcfAttached() bool {
	if x != nil {
		return x.VcfAttached
	}
	return false
}

type isVlan_Assignment interface {
	isVlan_Assignment()
}

type Vlan_LegacyVlan struct {
	LegacyVlan *LegacyVlan `protobuf:"bytes,1,opt,name=legacy_vlan,json=legacyVlan,proto3,oneof"`
}

type Vlan_VlanPair struct {
	VlanPair *VlanPair `protobuf:"bytes,2,opt,name=vlan_pair,json=vlanPair,proto3,oneof"`
}

func (*Vlan_LegacyVlan) isVlan_Assignment() {}

func (*Vlan_VlanPair) isVlan_Assignment() {}

type MetalGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the VRF is nil, the MetalGateway has no associated VRF
	Vrf      *VRF     `protobuf:"bytes,1,opt,name=vrf,proto3" json:"vrf,omitempty"`
	Prefixes []string `protobuf:"bytes,2,rep,name=prefixes,proto3" json:"prefixes,omitempty"`
}

func (x *MetalGateway) Reset() {
	*x = MetalGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetalGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetalGateway) ProtoMessage() {}

func (x *MetalGateway) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetalGateway.ProtoReflect.Descriptor instead.
func (*MetalGateway) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{6}
}

func (x *MetalGateway) GetVrf() *VRF {
	if x != nil {
		return x.Vrf
	}
	return nil
}

func (x *MetalGateway) GetPrefixes() []string {
	if x != nil {
		return x.Prefixes
	}
	return nil
}

type VRF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VrfUuid  string `protobuf:"bytes,1,opt,name=vrf_uuid,json=vrfUuid,proto3" json:"vrf_uuid,omitempty"`
	IpVrfVni uint32 `protobuf:"varint,2,opt,name=ip_vrf_vni,json=ipVrfVni,proto3" json:"ip_vrf_vni,omitempty"`
}

func (x *VRF) Reset() {
	*x = VRF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{7}
}

func (x *VRF) GetVrfUuid() string {
	if x != nil {
		return x.VrfUuid
	}
	return ""
}

func (x *VRF) GetIpVrfVni() uint32 {
	if x != nil {
		return x.IpVrfVni
	}
	return 0
}

type TrunkPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Switchport   *Switchport `protobuf:"bytes,1,opt,name=switchport,proto3" json:"switchport,omitempty"`
	NativeVlan   uint32      `protobuf:"varint,2,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkedVlans []*Vlan     `protobuf:"bytes,3,rep,name=trunked_vlans,json=trunkedVlans,proto3" json:"trunked_vlans,omitempty"`
}

func (x *TrunkPort) Reset() {
	*x = TrunkPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrunkPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrunkPort) ProtoMessage() {}

func (x *TrunkPort) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrunkPort.ProtoReflect.Descriptor instead.
func (*TrunkPort) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{8}
}

func (x *TrunkPort) GetSwitchport() *Switchport {
	if x != nil {
		return x.Switchport
	}
	return nil
}

func (x *TrunkPort) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *TrunkPort) GetTrunkedVlans() []*Vlan {
	if x != nil {
		return x.TrunkedVlans
	}
	return nil
}

type Portchannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	LacpFallback bool   `protobuf:"varint,3,opt,name=lacp_fallback,json=lacpFallback,proto3" json:"lacp_fallback,omitempty"`
}

func (x *Portchannel) Reset() {
	*x = Portchannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Portchannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Portchannel) ProtoMessage() {}

func (x *Portchannel) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Portchannel.ProtoReflect.Descriptor instead.
func (*Portchannel) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{9}
}

func (x *Portchannel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Portchannel) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Portchannel) GetLacpFallback() bool {
	if x != nil {
		return x.LacpFallback
	}
	return false
}

type Bgp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string       `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	V4       *BgpNeighbor `protobuf:"bytes,2,opt,name=v4,proto3" json:"v4,omitempty"`
	V6       *BgpNeighbor `protobuf:"bytes,3,opt,name=v6,proto3" json:"v6,omitempty"`
}

func (x *Bgp) Reset() {
	*x = Bgp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bgp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bgp) ProtoMessage() {}

func (x *Bgp) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bgp.ProtoReflect.Descriptor instead.
func (*Bgp) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{10}
}

func (x *Bgp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Bgp) GetV4() *BgpNeighbor {
	if x != nil {
		return x.V4
	}
	return nil
}

func (x *Bgp) GetV6() *BgpNeighbor {
	if x != nil {
		return x.V6
	}
	return nil
}

type BgpNeighbor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled            bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	EnableDefaultRoute bool   `protobuf:"varint,2,opt,name=enable_default_route,json=enableDefaultRoute,proto3" json:"enable_default_route,omitempty"`
	Address            string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	RemoteAsn          uint32 `protobuf:"varint,4,opt,name=remote_asn,json=remoteAsn,proto3" json:"remote_asn,omitempty"`
	Description        string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	MaxPrefixes        uint32 `protobuf:"varint,6,opt,name=max_prefixes,json=maxPrefixes,proto3" json:"max_prefixes,omitempty"`
}

func (x *BgpNeighbor) Reset() {
	*x = BgpNeighbor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BgpNeighbor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BgpNeighbor) ProtoMessage() {}

func (x *BgpNeighbor) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BgpNeighbor.ProtoReflect.Descriptor instead.
func (*BgpNeighbor) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{11}
}

func (x *BgpNeighbor) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *BgpNeighbor) GetEnableDefaultRoute() bool {
	if x != nil {
		return x.EnableDefaultRoute
	}
	return false
}

func (x *BgpNeighbor) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *BgpNeighbor) GetRemoteAsn() uint32 {
	if x != nil {
		return x.RemoteAsn
	}
	return 0
}

func (x *BgpNeighbor) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *BgpNeighbor) GetMaxPrefixes() uint32 {
	if x != nil {
		return x.MaxPrefixes
	}
	return 0
}

type L3Bonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel *Portchannel `protobuf:"bytes,2,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	InterfaceA  *Switchport  `protobuf:"bytes,3,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB  *Switchport  `protobuf:"bytes,4,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
	Addresses   []string     `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NativeVlan  uint32       `protobuf:"varint,6,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	ElasticIp   []*ElasticIP `protobuf:"bytes,8,rep,name=elastic_ip,json=elasticIp,proto3" json:"elastic_ip,omitempty"`
	Bgp         *Bgp         `protobuf:"bytes,9,opt,name=bgp,proto3" json:"bgp,omitempty"`
	// Do not set (used internally between orca-controller and orca-agent).
	RelayAddress string `protobuf:"bytes,10,opt,name=relay_address,json=relayAddress,proto3" json:"relay_address,omitempty"`
}

func (x *L3Bonded) Reset() {
	*x = L3Bonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L3Bonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L3Bonded) ProtoMessage() {}

func (x *L3Bonded) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L3Bonded.ProtoReflect.Descriptor instead.
func (*L3Bonded) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{12}
}

func (x *L3Bonded) GetPortchannel() *Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *L3Bonded) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *L3Bonded) GetInterfaceB() *Switchport {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

func (x *L3Bonded) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *L3Bonded) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *L3Bonded) GetElasticIp() []*ElasticIP {
	if x != nil {
		return x.ElasticIp
	}
	return nil
}

func (x *L3Bonded) GetBgp() *Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

func (x *L3Bonded) GetRelayAddress() string {
	if x != nil {
		return x.RelayAddress
	}
	return ""
}

type L2Bonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel  *Portchannel `protobuf:"bytes,2,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	InterfaceA   *Switchport  `protobuf:"bytes,3,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB   *Switchport  `protobuf:"bytes,4,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
	NativeVlan   uint32       `protobuf:"varint,5,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkedVlans []*Vlan      `protobuf:"bytes,6,rep,name=trunked_vlans,json=trunkedVlans,proto3" json:"trunked_vlans,omitempty"`
}

func (x *L2Bonded) Reset() {
	*x = L2Bonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2Bonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2Bonded) ProtoMessage() {}

func (x *L2Bonded) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2Bonded.ProtoReflect.Descriptor instead.
func (*L2Bonded) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{13}
}

func (x *L2Bonded) GetPortchannel() *Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *L2Bonded) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *L2Bonded) GetInterfaceB() *Switchport {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

func (x *L2Bonded) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *L2Bonded) GetTrunkedVlans() []*Vlan {
	if x != nil {
		return x.TrunkedVlans
	}
	return nil
}

type HybridBonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel  *Portchannel `protobuf:"bytes,2,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	InterfaceA   *Switchport  `protobuf:"bytes,3,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB   *Switchport  `protobuf:"bytes,4,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
	Addresses    []string     `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NativeVlan   uint32       `protobuf:"varint,6,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	TrunkedVlans []*Vlan      `protobuf:"bytes,7,rep,name=trunked_vlans,json=trunkedVlans,proto3" json:"trunked_vlans,omitempty"`
	ElasticIp    []*ElasticIP `protobuf:"bytes,8,rep,name=elastic_ip,json=elasticIp,proto3" json:"elastic_ip,omitempty"`
	Bgp          *Bgp         `protobuf:"bytes,9,opt,name=bgp,proto3" json:"bgp,omitempty"`
}

func (x *HybridBonded) Reset() {
	*x = HybridBonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridBonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridBonded) ProtoMessage() {}

func (x *HybridBonded) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridBonded.ProtoReflect.Descriptor instead.
func (*HybridBonded) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{14}
}

func (x *HybridBonded) GetPortchannel() *Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *HybridBonded) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *HybridBonded) GetInterfaceB() *Switchport {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

func (x *HybridBonded) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *HybridBonded) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *HybridBonded) GetTrunkedVlans() []*Vlan {
	if x != nil {
		return x.TrunkedVlans
	}
	return nil
}

func (x *HybridBonded) GetElasticIp() []*ElasticIP {
	if x != nil {
		return x.ElasticIp
	}
	return nil
}

func (x *HybridBonded) GetBgp() *Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

type L2Unbonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceA *TrunkPort `protobuf:"bytes,2,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB *TrunkPort `protobuf:"bytes,3,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
}

func (x *L2Unbonded) Reset() {
	*x = L2Unbonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2Unbonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2Unbonded) ProtoMessage() {}

func (x *L2Unbonded) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2Unbonded.ProtoReflect.Descriptor instead.
func (*L2Unbonded) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{15}
}

func (x *L2Unbonded) GetInterfaceA() *TrunkPort {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *L2Unbonded) GetInterfaceB() *TrunkPort {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

type HybridUnbonded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel *Portchannel `protobuf:"bytes,2,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	InterfaceA  *Switchport  `protobuf:"bytes,3,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB  *TrunkPort   `protobuf:"bytes,4,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
	Addresses   []string     `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NativeVlan  uint32       `protobuf:"varint,6,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	ElasticIp   []*ElasticIP `protobuf:"bytes,8,rep,name=elastic_ip,json=elasticIp,proto3" json:"elastic_ip,omitempty"`
	Bgp         *Bgp         `protobuf:"bytes,9,opt,name=bgp,proto3" json:"bgp,omitempty"`
}

func (x *HybridUnbonded) Reset() {
	*x = HybridUnbonded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridUnbonded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridUnbonded) ProtoMessage() {}

func (x *HybridUnbonded) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridUnbonded.ProtoReflect.Descriptor instead.
func (*HybridUnbonded) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{16}
}

func (x *HybridUnbonded) GetPortchannel() *Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *HybridUnbonded) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *HybridUnbonded) GetInterfaceB() *TrunkPort {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

func (x *HybridUnbonded) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *HybridUnbonded) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *HybridUnbonded) GetElasticIp() []*ElasticIP {
	if x != nil {
		return x.ElasticIp
	}
	return nil
}

func (x *HybridUnbonded) GetBgp() *Bgp {
	if x != nil {
		return x.Bgp
	}
	return nil
}

type Deprovision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Portchannel  *Portchannel `protobuf:"bytes,2,opt,name=portchannel,proto3" json:"portchannel,omitempty"`
	InterfaceA   *Switchport  `protobuf:"bytes,3,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB   *Switchport  `protobuf:"bytes,4,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
	Addresses    []string     `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`
	NativeVlan   uint32       `protobuf:"varint,6,opt,name=native_vlan,json=nativeVlan,proto3" json:"native_vlan,omitempty"`
	RelayAddress string       `protobuf:"bytes,7,opt,name=relay_address,json=relayAddress,proto3" json:"relay_address,omitempty"`
}

func (x *Deprovision) Reset() {
	*x = Deprovision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deprovision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deprovision) ProtoMessage() {}

func (x *Deprovision) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deprovision.ProtoReflect.Descriptor instead.
func (*Deprovision) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{17}
}

func (x *Deprovision) GetPortchannel() *Portchannel {
	if x != nil {
		return x.Portchannel
	}
	return nil
}

func (x *Deprovision) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *Deprovision) GetInterfaceB() *Switchport {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

func (x *Deprovision) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *Deprovision) GetNativeVlan() uint32 {
	if x != nil {
		return x.NativeVlan
	}
	return 0
}

func (x *Deprovision) GetRelayAddress() string {
	if x != nil {
		return x.RelayAddress
	}
	return ""
}

type Unenrolled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceA *Switchport `protobuf:"bytes,1,opt,name=interface_a,json=interfaceA,proto3" json:"interface_a,omitempty"`
	InterfaceB *Switchport `protobuf:"bytes,2,opt,name=interface_b,json=interfaceB,proto3" json:"interface_b,omitempty"`
}

func (x *Unenrolled) Reset() {
	*x = Unenrolled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unenrolled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unenrolled) ProtoMessage() {}

func (x *Unenrolled) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unenrolled.ProtoReflect.Descriptor instead.
func (*Unenrolled) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{18}
}

func (x *Unenrolled) GetInterfaceA() *Switchport {
	if x != nil {
		return x.InterfaceA
	}
	return nil
}

func (x *Unenrolled) GetInterfaceB() *Switchport {
	if x != nil {
		return x.InterfaceB
	}
	return nil
}

type InstanceConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instance     *Instance      `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	NetworkModes []*NetworkMode `protobuf:"bytes,2,rep,name=network_modes,json=networkModes,proto3" json:"network_modes,omitempty"`
}

func (x *InstanceConfiguration) Reset() {
	*x = InstanceConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceConfiguration) ProtoMessage() {}

func (x *InstanceConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceConfiguration.ProtoReflect.Descriptor instead.
func (*InstanceConfiguration) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{19}
}

func (x *InstanceConfiguration) GetInstance() *Instance {
	if x != nil {
		return x.Instance
	}
	return nil
}

func (x *InstanceConfiguration) GetNetworkModes() []*NetworkMode {
	if x != nil {
		return x.NetworkModes
	}
	return nil
}

type ProjectSwitchConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// acl_prefixes contains prefixes permitted within the project's ACL
	AclPrefixes []string `protobuf:"bytes,2,rep,name=acl_prefixes,json=aclPrefixes,proto3" json:"acl_prefixes,omitempty"`
	// local_prefixes refers to internal prefixes that the project is allowed to advertise out via bgp
	LocalPrefixes []string `protobuf:"bytes,3,rep,name=local_prefixes,json=localPrefixes,proto3" json:"local_prefixes,omitempty"`
	// global_prefixes refers to validated public prefixes that the project is allowed to advertise out via bgp
	GlobalPrefixes []string `protobuf:"bytes,4,rep,name=global_prefixes,json=globalPrefixes,proto3" json:"global_prefixes,omitempty"`
	// Vlans that should be present in the Switch's L2 forwarding table for this paritcular project
	SwitchVlans []*Vlan `protobuf:"bytes,5,rep,name=switch_vlans,json=switchVlans,proto3" json:"switch_vlans,omitempty"`
	// device_a points to the primary switch onto which to apply this configuration
	DeviceA *Switch `protobuf:"bytes,6,opt,name=device_a,json=deviceA,proto3" json:"device_a,omitempty"`
	// device_b points to the secondary switch onto which to apply this configuration
	DeviceB *Switch `protobuf:"bytes,7,opt,name=device_b,json=deviceB,proto3" json:"device_b,omitempty"`
}

func (x *ProjectSwitchConfiguration) Reset() {
	*x = ProjectSwitchConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProjectSwitchConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProjectSwitchConfiguration) ProtoMessage() {}

func (x *ProjectSwitchConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProjectSwitchConfiguration.ProtoReflect.Descriptor instead.
func (*ProjectSwitchConfiguration) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{20}
}

func (x *ProjectSwitchConfiguration) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ProjectSwitchConfiguration) GetAclPrefixes() []string {
	if x != nil {
		return x.AclPrefixes
	}
	return nil
}

func (x *ProjectSwitchConfiguration) GetLocalPrefixes() []string {
	if x != nil {
		return x.LocalPrefixes
	}
	return nil
}

func (x *ProjectSwitchConfiguration) GetGlobalPrefixes() []string {
	if x != nil {
		return x.GlobalPrefixes
	}
	return nil
}

func (x *ProjectSwitchConfiguration) GetSwitchVlans() []*Vlan {
	if x != nil {
		return x.SwitchVlans
	}
	return nil
}

func (x *ProjectSwitchConfiguration) GetDeviceA() *Switch {
	if x != nil {
		return x.DeviceA
	}
	return nil
}

func (x *ProjectSwitchConfiguration) GetDeviceB() *Switch {
	if x != nil {
		return x.DeviceB
	}
	return nil
}

type NetworkMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Mode:
	//	*NetworkMode_L3BondedMode
	//	*NetworkMode_L2BondedMode
	//	*NetworkMode_HybridBondedMode
	//	*NetworkMode_L2UnbondedMode
	//	*NetworkMode_HybridUnbondedMode
	//	*NetworkMode_Deprovision
	//	*NetworkMode_Unenrolled
	Mode isNetworkMode_Mode `protobuf_oneof:"mode"`
}

func (x *NetworkMode) Reset() {
	*x = NetworkMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMode) ProtoMessage() {}

func (x *NetworkMode) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMode.ProtoReflect.Descriptor instead.
func (*NetworkMode) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{21}
}

func (m *NetworkMode) GetMode() isNetworkMode_Mode {
	if m != nil {
		return m.Mode
	}
	return nil
}

func (x *NetworkMode) GetL3BondedMode() *L3Bonded {
	if x, ok := x.GetMode().(*NetworkMode_L3BondedMode); ok {
		return x.L3BondedMode
	}
	return nil
}

func (x *NetworkMode) GetL2BondedMode() *L2Bonded {
	if x, ok := x.GetMode().(*NetworkMode_L2BondedMode); ok {
		return x.L2BondedMode
	}
	return nil
}

func (x *NetworkMode) GetHybridBondedMode() *HybridBonded {
	if x, ok := x.GetMode().(*NetworkMode_HybridBondedMode); ok {
		return x.HybridBondedMode
	}
	return nil
}

func (x *NetworkMode) GetL2UnbondedMode() *L2Unbonded {
	if x, ok := x.GetMode().(*NetworkMode_L2UnbondedMode); ok {
		return x.L2UnbondedMode
	}
	return nil
}

func (x *NetworkMode) GetHybridUnbondedMode() *HybridUnbonded {
	if x, ok := x.GetMode().(*NetworkMode_HybridUnbondedMode); ok {
		return x.HybridUnbondedMode
	}
	return nil
}

func (x *NetworkMode) GetDeprovision() *Deprovision {
	if x, ok := x.GetMode().(*NetworkMode_Deprovision); ok {
		return x.Deprovision
	}
	return nil
}

func (x *NetworkMode) GetUnenrolled() *Unenrolled {
	if x, ok := x.GetMode().(*NetworkMode_Unenrolled); ok {
		return x.Unenrolled
	}
	return nil
}

type isNetworkMode_Mode interface {
	isNetworkMode_Mode()
}

type NetworkMode_L3BondedMode struct {
	L3BondedMode *L3Bonded `protobuf:"bytes,1,opt,name=l3_bonded_mode,json=l3BondedMode,proto3,oneof"`
}

type NetworkMode_L2BondedMode struct {
	L2BondedMode *L2Bonded `protobuf:"bytes,2,opt,name=l2_bonded_mode,json=l2BondedMode,proto3,oneof"`
}

type NetworkMode_HybridBondedMode struct {
	HybridBondedMode *HybridBonded `protobuf:"bytes,3,opt,name=hybrid_bonded_mode,json=hybridBondedMode,proto3,oneof"`
}

type NetworkMode_L2UnbondedMode struct {
	L2UnbondedMode *L2Unbonded `protobuf:"bytes,4,opt,name=l2_unbonded_mode,json=l2UnbondedMode,proto3,oneof"`
}

type NetworkMode_HybridUnbondedMode struct {
	HybridUnbondedMode *HybridUnbonded `protobuf:"bytes,5,opt,name=hybrid_unbonded_mode,json=hybridUnbondedMode,proto3,oneof"`
}

type NetworkMode_Deprovision struct {
	Deprovision *Deprovision `protobuf:"bytes,6,opt,name=deprovision,proto3,oneof"`
}

type NetworkMode_Unenrolled struct {
	Unenrolled *Unenrolled `protobuf:"bytes,7,opt,name=unenrolled,proto3,oneof"`
}

func (*NetworkMode_L3BondedMode) isNetworkMode_Mode() {}

func (*NetworkMode_L2BondedMode) isNetworkMode_Mode() {}

func (*NetworkMode_HybridBondedMode) isNetworkMode_Mode() {}

func (*NetworkMode_L2UnbondedMode) isNetworkMode_Mode() {}

func (*NetworkMode_HybridUnbondedMode) isNetworkMode_Mode() {}

func (*NetworkMode_Deprovision) isNetworkMode_Mode() {}

func (*NetworkMode_Unenrolled) isNetworkMode_Mode() {}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// InstanceConfiguration is the config type for Metal instances attached to a standard pair of ToR switches
	InstanceConfig *InstanceConfiguration `protobuf:"bytes,1,opt,name=instance_config,json=instanceConfig,proto3" json:"instance_config,omitempty"`
	// ProjectSwitchConfiguration is the config type for Metal projects with respect to a pair of ToR switches
	ProjectSwitchConfig *ProjectSwitchConfiguration `protobuf:"bytes,2,opt,name=project_switch_config,json=projectSwitchConfig,proto3" json:"project_switch_config,omitempty"`
	// Layer 2 Port Request
	L2PortConfig *L2PortServiceRequest `protobuf:"bytes,3,opt,name=l2_port_config,json=l2PortConfig,proto3" json:"l2_port_config,omitempty"`
	//Layer 2 VPN Request
	L2VpnConfig *L2VPNServiceRequest `protobuf:"bytes,4,opt,name=l2_vpn_config,json=l2VpnConfig,proto3" json:"l2_vpn_config,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{22}
}

func (x *Configuration) GetInstanceConfig() *InstanceConfiguration {
	if x != nil {
		return x.InstanceConfig
	}
	return nil
}

func (x *Configuration) GetProjectSwitchConfig() *ProjectSwitchConfiguration {
	if x != nil {
		return x.ProjectSwitchConfig
	}
	return nil
}

func (x *Configuration) GetL2PortConfig() *L2PortServiceRequest {
	if x != nil {
		return x.L2PortConfig
	}
	return nil
}

func (x *Configuration) GetL2VpnConfig() *L2VPNServiceRequest {
	if x != nil {
		return x.L2VpnConfig
	}
	return nil
}

type ConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *ConfigurationRequest) Reset() {
	*x = ConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationRequest) ProtoMessage() {}

func (x *ConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationRequest.ProtoReflect.Descriptor instead.
func (*ConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{23}
}

func (x *ConfigurationRequest) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type JournalOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configuration *Configuration `protobuf:"bytes,1,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *JournalOnlyRequest) Reset() {
	*x = JournalOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalOnlyRequest) ProtoMessage() {}

func (x *JournalOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalOnlyRequest.ProtoReflect.Descriptor instead.
func (*JournalOnlyRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{24}
}

func (x *JournalOnlyRequest) GetConfiguration() *Configuration {
	if x != nil {
		return x.Configuration
	}
	return nil
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{25}
}

func (x *Update) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Update) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Notification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Updates []*Update `protobuf:"bytes,1,rep,name=updates,proto3" json:"updates,omitempty"`
	Deletes []string  `protobuf:"bytes,2,rep,name=deletes,proto3" json:"deletes,omitempty"`
}

func (x *Notification) Reset() {
	*x = Notification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{26}
}

func (x *Notification) GetUpdates() []*Update {
	if x != nil {
		return x.Updates
	}
	return nil
}

func (x *Notification) GetDeletes() []string {
	if x != nil {
		return x.Deletes
	}
	return nil
}

type UpdateConfigStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Status   Status `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status,omitempty"`
}

func (x *UpdateConfigStatusRequest) Reset() {
	*x = UpdateConfigStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateConfigStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateConfigStatusRequest) ProtoMessage() {}

func (x *UpdateConfigStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateConfigStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateConfigStatusRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateConfigStatusRequest) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *UpdateConfigStatusRequest) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

type ConfigStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Status   Status `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status,omitempty"`
}

func (x *ConfigStatusMessage) Reset() {
	*x = ConfigStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigStatusMessage) ProtoMessage() {}

func (x *ConfigStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigStatusMessage.ProtoReflect.Descriptor instead.
func (*ConfigStatusMessage) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{28}
}

func (x *ConfigStatusMessage) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *ConfigStatusMessage) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

type JournalOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
	Status   Status `protobuf:"varint,2,opt,name=status,proto3,enum=Status" json:"status,omitempty"`
}

func (x *JournalOnlyResponse) Reset() {
	*x = JournalOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JournalOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JournalOnlyResponse) ProtoMessage() {}

func (x *JournalOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JournalOnlyResponse.ProtoReflect.Descriptor instead.
func (*JournalOnlyResponse) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{29}
}

func (x *JournalOnlyResponse) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

func (x *JournalOnlyResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_UNKNOWN
}

type ConfigStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigId string `protobuf:"bytes,1,opt,name=config_id,json=configId,proto3" json:"config_id,omitempty"`
}

func (x *ConfigStatusRequest) Reset() {
	*x = ConfigStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigStatusRequest) ProtoMessage() {}

func (x *ConfigStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigStatusRequest.ProtoReflect.Descriptor instead.
func (*ConfigStatusRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{30}
}

func (x *ConfigStatusRequest) GetConfigId() string {
	if x != nil {
		return x.ConfigId
	}
	return ""
}

type ReplaceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Current *Configuration `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	New     *Configuration `protobuf:"bytes,2,opt,name=new,proto3" json:"new,omitempty"`
}

func (x *ReplaceConfigRequest) Reset() {
	*x = ReplaceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplaceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplaceConfigRequest) ProtoMessage() {}

func (x *ReplaceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplaceConfigRequest.ProtoReflect.Descriptor instead.
func (*ReplaceConfigRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{31}
}

func (x *ReplaceConfigRequest) GetCurrent() *Configuration {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *ReplaceConfigRequest) GetNew() *Configuration {
	if x != nil {
		return x.New
	}
	return nil
}

type DriftDetectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Intended *Configuration `protobuf:"bytes,2,opt,name=intended,proto3" json:"intended,omitempty"`
}

func (x *DriftDetectRequest) Reset() {
	*x = DriftDetectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriftDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriftDetectRequest) ProtoMessage() {}

func (x *DriftDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriftDetectRequest.ProtoReflect.Descriptor instead.
func (*DriftDetectRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{32}
}

func (x *DriftDetectRequest) GetIntended() *Configuration {
	if x != nil {
		return x.Intended
	}
	return nil
}

type DriftDetectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Notifications map[string]*Notification `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DriftDetectResponse) Reset() {
	*x = DriftDetectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DriftDetectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriftDetectResponse) ProtoMessage() {}

func (x *DriftDetectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriftDetectResponse.ProtoReflect.Descriptor instead.
func (*DriftDetectResponse) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{33}
}

func (x *DriftDetectResponse) GetNotifications() map[string]*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type InstanceDriftDetectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId string `protobuf:"bytes,1,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
}

func (x *InstanceDriftDetectRequest) Reset() {
	*x = InstanceDriftDetectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstanceDriftDetectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceDriftDetectRequest) ProtoMessage() {}

func (x *InstanceDriftDetectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceDriftDetectRequest.ProtoReflect.Descriptor instead.
func (*InstanceDriftDetectRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{34}
}

func (x *InstanceDriftDetectRequest) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

type ElasticIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix         string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	NextHopAddress string `protobuf:"bytes,2,opt,name=next_hop_address,json=nextHopAddress,proto3" json:"next_hop_address,omitempty"`
}

func (x *ElasticIP) Reset() {
	*x = ElasticIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElasticIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElasticIP) ProtoMessage() {}

func (x *ElasticIP) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElasticIP.ProtoReflect.Descriptor instead.
func (*ElasticIP) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{35}
}

func (x *ElasticIP) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ElasticIP) GetNextHopAddress() string {
	if x != nil {
		return x.NextHopAddress
	}
	return ""
}

type L2PortServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid              string            `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Device            string            `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
	IntName           string            `protobuf:"bytes,3,opt,name=intName,proto3" json:"intName,omitempty"`
	IntDesc           string            `protobuf:"bytes,4,opt,name=intDesc,proto3" json:"intDesc,omitempty"`
	IntTpid           Tpid              `protobuf:"varint,5,opt,name=intTpid,proto3,enum=Tpid" json:"intTpid,omitempty"`
	PortEncapsulation PortEncapsulation `protobuf:"varint,6,opt,name=portEncapsulation,proto3,enum=PortEncapsulation" json:"portEncapsulation,omitempty"`
	Speed             uint32            `protobuf:"varint,7,opt,name=speed,proto3" json:"speed,omitempty"`
	ServiceType       ServiceType       `protobuf:"varint,8,opt,name=serviceType,proto3,enum=ServiceType" json:"serviceType,omitempty"`
	RequestHeaders    *RequestHeaders   `protobuf:"bytes,9,opt,name=requestHeaders,proto3" json:"requestHeaders,omitempty"`
	Mtu               uint32            `protobuf:"varint,10,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *L2PortServiceRequest) Reset() {
	*x = L2PortServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2PortServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2PortServiceRequest) ProtoMessage() {}

func (x *L2PortServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2PortServiceRequest.ProtoReflect.Descriptor instead.
func (*L2PortServiceRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{36}
}

func (x *L2PortServiceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *L2PortServiceRequest) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *L2PortServiceRequest) GetIntName() string {
	if x != nil {
		return x.IntName
	}
	return ""
}

func (x *L2PortServiceRequest) GetIntDesc() string {
	if x != nil {
		return x.IntDesc
	}
	return ""
}

func (x *L2PortServiceRequest) GetIntTpid() Tpid {
	if x != nil {
		return x.IntTpid
	}
	return Tpid_TPID_8100
}

func (x *L2PortServiceRequest) GetPortEncapsulation() PortEncapsulation {
	if x != nil {
		return x.PortEncapsulation
	}
	return PortEncapsulation_DOT1Q
}

func (x *L2PortServiceRequest) GetSpeed() uint32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *L2PortServiceRequest) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_MSP
}

func (x *L2PortServiceRequest) GetRequestHeaders() *RequestHeaders {
	if x != nil {
		return x.RequestHeaders
	}
	return nil
}

func (x *L2PortServiceRequest) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type RequestHeaders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Region        Region `protobuf:"varint,1,opt,name=region,proto3,enum=Region" json:"region,omitempty"`
	WorkflowId    string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	RequestType   string `protobuf:"bytes,3,opt,name=requestType,proto3" json:"requestType,omitempty"`
	Metro         string `protobuf:"bytes,4,opt,name=metro,proto3" json:"metro,omitempty"`
	CorrelationId string `protobuf:"bytes,5,opt,name=correlationId,proto3" json:"correlationId,omitempty"`
	ServiceId     string `protobuf:"bytes,6,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
}

func (x *RequestHeaders) Reset() {
	*x = RequestHeaders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestHeaders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestHeaders) ProtoMessage() {}

func (x *RequestHeaders) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestHeaders.ProtoReflect.Descriptor instead.
func (*RequestHeaders) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{37}
}

func (x *RequestHeaders) GetRegion() Region {
	if x != nil {
		return x.Region
	}
	return Region_AMER
}

func (x *RequestHeaders) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RequestHeaders) GetRequestType() string {
	if x != nil {
		return x.RequestType
	}
	return ""
}

func (x *RequestHeaders) GetMetro() string {
	if x != nil {
		return x.Metro
	}
	return ""
}

func (x *RequestHeaders) GetCorrelationId() string {
	if x != nil {
		return x.CorrelationId
	}
	return ""
}

func (x *RequestHeaders) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type L2VPNServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	EquinixAsn          uint32          `protobuf:"varint,2,opt,name=equinixAsn,proto3" json:"equinixAsn,omitempty"`
	RiName              string          `protobuf:"bytes,3,opt,name=riName,proto3" json:"riName,omitempty"`
	RiDesc              string          `protobuf:"bytes,4,opt,name=riDesc,proto3" json:"riDesc,omitempty"`
	RiServiceId         uint32          `protobuf:"varint,5,opt,name=riServiceId,proto3" json:"riServiceId,omitempty"`
	Rate                uint32          `protobuf:"varint,6,opt,name=rate,proto3" json:"rate,omitempty"`
	RtSequence          uint32          `protobuf:"varint,7,opt,name=rtSequence,proto3" json:"rtSequence,omitempty"`
	Rd                  string          `protobuf:"bytes,8,opt,name=rd,proto3" json:"rd,omitempty"`
	CustomerId          string          `protobuf:"bytes,9,opt,name=customerId,proto3" json:"customerId,omitempty"`
	CustomerShortName   string          `protobuf:"bytes,10,opt,name=customerShortName,proto3" json:"customerShortName,omitempty"`
	CustomerContact     string          `protobuf:"bytes,11,opt,name=customerContact,proto3" json:"customerContact,omitempty"`
	CustomerDescription string          `protobuf:"bytes,12,opt,name=customerDescription,proto3" json:"customerDescription,omitempty"`
	DeviceChainGroupId  string          `protobuf:"bytes,13,opt,name=deviceChainGroupId,proto3" json:"deviceChainGroupId,omitempty"`
	GeoScope            GeoScope        `protobuf:"varint,14,opt,name=geoScope,proto3,enum=GeoScope" json:"geoScope,omitempty"`
	Site                *SiteProperties `protobuf:"bytes,15,opt,name=site,proto3" json:"site,omitempty"`
}

func (x *L2VPNServiceRequest) Reset() {
	*x = L2VPNServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *L2VPNServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*L2VPNServiceRequest) ProtoMessage() {}

func (x *L2VPNServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use L2VPNServiceRequest.ProtoReflect.Descriptor instead.
func (*L2VPNServiceRequest) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{38}
}

func (x *L2VPNServiceRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *L2VPNServiceRequest) GetEquinixAsn() uint32 {
	if x != nil {
		return x.EquinixAsn
	}
	return 0
}

func (x *L2VPNServiceRequest) GetRiName() string {
	if x != nil {
		return x.RiName
	}
	return ""
}

func (x *L2VPNServiceRequest) GetRiDesc() string {
	if x != nil {
		return x.RiDesc
	}
	return ""
}

func (x *L2VPNServiceRequest) GetRiServiceId() uint32 {
	if x != nil {
		return x.RiServiceId
	}
	return 0
}

func (x *L2VPNServiceRequest) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *L2VPNServiceRequest) GetRtSequence() uint32 {
	if x != nil {
		return x.RtSequence
	}
	return 0
}

func (x *L2VPNServiceRequest) GetRd() string {
	if x != nil {
		return x.Rd
	}
	return ""
}

func (x *L2VPNServiceRequest) GetCustomerId() string {
	if x != nil {
		return x.CustomerId
	}
	return ""
}

func (x *L2VPNServiceRequest) GetCustomerShortName() string {
	if x != nil {
		return x.CustomerShortName
	}
	return ""
}

func (x *L2VPNServiceRequest) GetCustomerContact() string {
	if x != nil {
		return x.CustomerContact
	}
	return ""
}

func (x *L2VPNServiceRequest) GetCustomerDescription() string {
	if x != nil {
		return x.CustomerDescription
	}
	return ""
}

func (x *L2VPNServiceRequest) GetDeviceChainGroupId() string {
	if x != nil {
		return x.DeviceChainGroupId
	}
	return ""
}

func (x *L2VPNServiceRequest) GetGeoScope() GeoScope {
	if x != nil {
		return x.GeoScope
	}
	return GeoScope_COUNTRY
}

func (x *L2VPNServiceRequest) GetSite() *SiteProperties {
	if x != nil {
		return x.Site
	}
	return nil
}

type SiteProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Device            string            `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	Metro             string            `protobuf:"bytes,2,opt,name=metro,proto3" json:"metro,omitempty"`
	RiServiceId       string            `protobuf:"bytes,3,opt,name=riServiceId,proto3" json:"riServiceId,omitempty"`
	VxlanId           string            `protobuf:"bytes,4,opt,name=vxlanId,proto3" json:"vxlanId,omitempty"`
	Mode              string            `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
	CustomerMacList   []string          `protobuf:"bytes,6,rep,name=customerMacList,proto3" json:"customerMacList,omitempty"`
	ClusterInfo       string            `protobuf:"bytes,7,opt,name=clusterInfo,proto3" json:"clusterInfo,omitempty"`
	VnfInfo           *VnfInfo          `protobuf:"bytes,8,opt,name=vnfInfo,proto3" json:"vnfInfo,omitempty"`
	Loopback          string            `protobuf:"bytes,9,opt,name=loopback,proto3" json:"loopback,omitempty"`
	RdSeq             uint32            `protobuf:"varint,10,opt,name=rdSeq,proto3" json:"rdSeq,omitempty"`
	IntName           string            `protobuf:"bytes,11,opt,name=intName,proto3" json:"intName,omitempty"`
	IntTpid           Tpid              `protobuf:"varint,12,opt,name=intTpid,proto3,enum=Tpid" json:"intTpid,omitempty"`
	OuterTpid         Tpid              `protobuf:"varint,13,opt,name=outerTpid,proto3,enum=Tpid" json:"outerTpid,omitempty"`
	InnerTpid         Tpid              `protobuf:"varint,14,opt,name=innerTpid,proto3,enum=Tpid" json:"innerTpid,omitempty"`
	PortEncapsulation PortEncapsulation `protobuf:"varint,15,opt,name=portEncapsulation,proto3,enum=PortEncapsulation" json:"portEncapsulation,omitempty"`
	CTag              uint32            `protobuf:"varint,16,opt,name=cTag,proto3" json:"cTag,omitempty"`
	STag              uint32            `protobuf:"varint,17,opt,name=sTag,proto3" json:"sTag,omitempty"`
	IntUnit           string            `protobuf:"bytes,18,opt,name=intUnit,proto3" json:"intUnit,omitempty"`
	IntUnitDesc       string            `protobuf:"bytes,19,opt,name=intUnitDesc,proto3" json:"intUnitDesc,omitempty"`
	EvpnVlan          uint32            `protobuf:"varint,20,opt,name=evpnVlan,proto3" json:"evpnVlan,omitempty"`
}

func (x *SiteProperties) Reset() {
	*x = SiteProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SiteProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SiteProperties) ProtoMessage() {}

func (x *SiteProperties) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SiteProperties.ProtoReflect.Descriptor instead.
func (*SiteProperties) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{39}
}

func (x *SiteProperties) GetDevice() string {
	if x != nil {
		return x.Device
	}
	return ""
}

func (x *SiteProperties) GetMetro() string {
	if x != nil {
		return x.Metro
	}
	return ""
}

func (x *SiteProperties) GetRiServiceId() string {
	if x != nil {
		return x.RiServiceId
	}
	return ""
}

func (x *SiteProperties) GetVxlanId() string {
	if x != nil {
		return x.VxlanId
	}
	return ""
}

func (x *SiteProperties) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *SiteProperties) GetCustomerMacList() []string {
	if x != nil {
		return x.CustomerMacList
	}
	return nil
}

func (x *SiteProperties) GetClusterInfo() string {
	if x != nil {
		return x.ClusterInfo
	}
	return ""
}

func (x *SiteProperties) GetVnfInfo() *VnfInfo {
	if x != nil {
		return x.VnfInfo
	}
	return nil
}

func (x *SiteProperties) GetLoopback() string {
	if x != nil {
		return x.Loopback
	}
	return ""
}

func (x *SiteProperties) GetRdSeq() uint32 {
	if x != nil {
		return x.RdSeq
	}
	return 0
}

func (x *SiteProperties) GetIntName() string {
	if x != nil {
		return x.IntName
	}
	return ""
}

func (x *SiteProperties) GetIntTpid() Tpid {
	if x != nil {
		return x.IntTpid
	}
	return Tpid_TPID_8100
}

func (x *SiteProperties) GetOuterTpid() Tpid {
	if x != nil {
		return x.OuterTpid
	}
	return Tpid_TPID_8100
}

func (x *SiteProperties) GetInnerTpid() Tpid {
	if x != nil {
		return x.InnerTpid
	}
	return Tpid_TPID_8100
}

func (x *SiteProperties) GetPortEncapsulation() PortEncapsulation {
	if x != nil {
		return x.PortEncapsulation
	}
	return PortEncapsulation_DOT1Q
}

func (x *SiteProperties) GetCTag() uint32 {
	if x != nil {
		return x.CTag
	}
	return 0
}

func (x *SiteProperties) GetSTag() uint32 {
	if x != nil {
		return x.STag
	}
	return 0
}

func (x *SiteProperties) GetIntUnit() string {
	if x != nil {
		return x.IntUnit
	}
	return ""
}

func (x *SiteProperties) GetIntUnitDesc() string {
	if x != nil {
		return x.IntUnitDesc
	}
	return ""
}

func (x *SiteProperties) GetEvpnVlan() uint32 {
	if x != nil {
		return x.EvpnVlan
	}
	return 0
}

type VnfInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VnfVendor string  `protobuf:"bytes,1,opt,name=vnfVendor,proto3" json:"vnfVendor,omitempty"`
	VnfType   VnfType `protobuf:"varint,2,opt,name=vnfType,proto3,enum=VnfType" json:"vnfType,omitempty"`
}

func (x *VnfInfo) Reset() {
	*x = VnfInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_network_service_configure_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VnfInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VnfInfo) ProtoMessage() {}

func (x *VnfInfo) ProtoReflect() protoreflect.Message {
	mi := &file_network_service_configure_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VnfInfo.ProtoReflect.Descriptor instead.
func (*VnfInfo) Descriptor() ([]byte, []int) {
	return file_network_service_configure_proto_rawDescGZIP(), []int{40}
}

func (x *VnfInfo) GetVnfVendor() string {
	if x != nil {
		return x.VnfVendor
	}
	return ""
}

func (x *VnfInfo) GetVnfType() VnfType {
	if x != nil {
		return x.VnfType
	}
	return VnfType_EM
}

var file_network_service_configure_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.FileOptions)(nil),
		ExtensionType: (*int64)(nil),
		Field:         52012,
		Name:          "schema_version",
		Tag:           "varint,52012,opt,name=schema_version",
		Filename:      "network_service_configure.proto",
	},
}

// Extension fields to descriptorpb.FileOptions.
var (
	// A custom option usable for us. The 52012 it's just a unique tag, *not* the option's actual value.
	//
	// optional int64 schema_version = 52012;
	E_SchemaVersion = &file_network_service_configure_proto_extTypes[0]
)

var File_network_service_configure_proto protoreflect.FileDescriptor

var file_network_service_configure_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x63, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x68, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x06, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x23, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x6c, 0x6f, 0x6f, 0x70, 0x62,
	0x61, 0x63, 0x6b, 0x30, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x30, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x61, 0x73, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x0a, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x05, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x31, 0x30, 0x47, 0x42, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x32, 0x35, 0x47, 0x42, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x50, 0x45,
	0x45, 0x44, 0x5f, 0x31, 0x30, 0x30, 0x47, 0x42, 0x10, 0x03, 0x22, 0x61, 0x0a, 0x08, 0x56, 0x6c,
	0x61, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x2b, 0x0a, 0x12, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x56, 0x6c, 0x61,
	0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x56, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x1c, 0x0a,
	0x0a, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x04,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x56, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79,
	0x56, 0x6c, 0x61, 0x6e, 0x12, 0x28, 0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x70, 0x61, 0x69,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x50, 0x61,
	0x69, 0x72, 0x48, 0x00, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x76, 0x6e, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x76, 0x6e, 0x69,
	0x12, 0x32, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x76, 0x63, 0x66, 0x5f, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x63, 0x66, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x42, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x61, 0x6c, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x03, 0x76, 0x72, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x04, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x03, 0x76, 0x72, 0x66, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0x3e, 0x0a, 0x03, 0x56, 0x52, 0x46,
	0x12, 0x19, 0x0a, 0x08, 0x76, 0x72, 0x66, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x72, 0x66, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x69,
	0x70, 0x5f, 0x76, 0x72, 0x66, 0x5f, 0x76, 0x6e, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x69, 0x70, 0x56, 0x72, 0x66, 0x56, 0x6e, 0x69, 0x22, 0x8f, 0x01, 0x0a, 0x09, 0x54, 0x72,
	0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12,
	0x2a, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x74,
	0x72, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x71, 0x0a, 0x0b, 0x50,
	0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x63,
	0x70, 0x5f, 0x66, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x6c, 0x61, 0x63, 0x70, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x5d,
	0x0a, 0x03, 0x42, 0x67, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x1c, 0x0a, 0x02, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x02, 0x76, 0x34, 0x12,
	0x1c, 0x0a, 0x02, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x67,
	0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x52, 0x02, 0x76, 0x36, 0x22, 0xd7, 0x01,
	0x0a, 0x0b, 0x42, 0x67, 0x70, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x73,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41,
	0x73, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x08, 0x4c, 0x33, 0x42, 0x6f,
	0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a,
	0x0a, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x50, 0x52, 0x09, 0x65,
	0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x03, 0x62, 0x67, 0x70, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x03, 0x62, 0x67, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x81, 0x02, 0x0a, 0x08, 0x4c, 0x32, 0x42, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x41, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a,
	0x0d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x75,
	0x6e, 0x6b, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x0c, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x12, 0x36, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x56,
	0x6c, 0x61, 0x6e, 0x12, 0x2a, 0x0a, 0x0d, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6c, 0x61,
	0x6e, 0x52, 0x0c, 0x74, 0x72, 0x75, 0x6e, 0x6b, 0x65, 0x64, 0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12,
	0x29, 0x0a, 0x0a, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x50, 0x52,
	0x09, 0x65, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x03, 0x62, 0x67,
	0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x04, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x03, 0x62,
	0x67, 0x70, 0x22, 0x7a, 0x0a, 0x0a, 0x4c, 0x32, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72,
	0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54,
	0x72, 0x75, 0x6e, 0x6b, 0x50, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x22, 0xbb,
	0x02, 0x0a, 0x0e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65,
	0x64, 0x12, 0x38, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x41, 0x12, 0x35, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x5f, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x54, 0x72, 0x75, 0x6e, 0x6b,
	0x50, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x0a, 0x65, 0x6c, 0x61,
	0x73, 0x74, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x50, 0x52, 0x09, 0x65, 0x6c, 0x61, 0x73, 0x74,
	0x69, 0x63, 0x49, 0x70, 0x12, 0x16, 0x0a, 0x03, 0x62, 0x67, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x04, 0x2e, 0x42, 0x67, 0x70, 0x52, 0x03, 0x62, 0x67, 0x70, 0x22, 0x9b, 0x02, 0x0a,
	0x0b, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b,
	0x70, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41, 0x12, 0x36,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74,
	0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76,
	0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6c, 0x61, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x7c, 0x0a, 0x0a, 0x55, 0x6e,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x41,
	0x12, 0x36, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x70, 0x6f,
	0x72, 0x74, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0a, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x42, 0x22, 0x85, 0x01, 0x0a, 0x15, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x08, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02,
	0x08, 0x01, 0x52, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x9a, 0x02, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x6c, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x61, 0x63, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0c, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x76, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x05, 0x2e, 0x56, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x56, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x12, 0x22, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x22, 0x9e, 0x03,
	0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x0e, 0x6c, 0x33, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x33, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x33, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x4c, 0x32, 0x42, 0x6f, 0x6e,
	0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x32, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x12, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x62, 0x6f,
	0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x37, 0x0a, 0x10, 0x6c, 0x32, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x4c,
	0x32, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6c, 0x32, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x14, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x12, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x30, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x44, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x75, 0x6e, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x55, 0x6e, 0x65, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x42, 0x0b, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x98,
	0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x4f, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0e, 0x6c, 0x32, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x4c, 0x32, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x0c, 0x6c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x0a, 0x0d, 0x6c, 0x32, 0x5f, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4c, 0x32, 0x56, 0x50, 0x4e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x6c, 0x32,
	0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x56, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x54, 0x0a, 0x12, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x22, 0x59, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x22, 0x62, 0x0a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x6e, 0x65, 0x77, 0x22, 0x40, 0x0a, 0x12, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x13, 0x44, 0x72, 0x69, 0x66,
	0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4d, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65,
	0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4f,
	0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x3d, 0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x69, 0x66, 0x74,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d,
	0x0a, 0x09, 0x45, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x63, 0x49, 0x50, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x68, 0x6f, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e,
	0x65, 0x78, 0x74, 0x48, 0x6f, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xea, 0x02,
	0x0a, 0x14, 0x4c, 0x32, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x54, 0x70, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x52, 0x07,
	0x69, 0x6e, 0x74, 0x54, 0x70, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x2e, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x37, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0xcd, 0x01, 0x0a, 0x0e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e,
	0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x72, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x85, 0x04, 0x0a, 0x13, 0x4c,
	0x32, 0x56, 0x50, 0x4e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x71, 0x75, 0x69, 0x6e, 0x69,
	0x78, 0x41, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x71, 0x75, 0x69,
	0x6e, 0x69, 0x78, 0x41, 0x73, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x69, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x69, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x69, 0x44, 0x65, 0x73, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x69, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x69, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x72, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x72, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x47, 0x65, 0x6f, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x52, 0x08, 0x67, 0x65, 0x6f, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x69,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x04, 0x73, 0x69,
	0x74, 0x65, 0x22, 0xf7, 0x04, 0x0a, 0x0e, 0x53, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x65, 0x74, 0x72, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x65,
	0x74, 0x72, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x69, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x49, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x78, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d,
	0x61, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x07, 0x76, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x56, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x76, 0x6e, 0x66, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x64, 0x53, 0x65, 0x71, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x64, 0x53, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x54, 0x70, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x05, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x54, 0x70, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x09, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x54, 0x70, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x52, 0x09, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x54, 0x70, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x70,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x05, 0x2e, 0x54, 0x70, 0x69, 0x64, 0x52,
	0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x70, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x11, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x61,
	0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x70, 0x6f, 0x72, 0x74, 0x45,
	0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x54, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x54, 0x61, 0x67,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x54, 0x61, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x73, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x76, 0x70, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x65, 0x76, 0x70, 0x6e, 0x56, 0x6c, 0x61, 0x6e, 0x22, 0x4b, 0x0a, 0x07,
	0x56, 0x6e, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6e, 0x66, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6e, 0x66, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x07, 0x76, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x08, 0x2e, 0x56, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x07, 0x76, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x2a, 0x5c, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x43, 0x45, 0x49, 0x56, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x2a, 0x33, 0x0a, 0x04, 0x54, 0x70, 0x69, 0x64, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x38, 0x31, 0x30, 0x30, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x39, 0x31, 0x30, 0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x54, 0x50, 0x49, 0x44, 0x5f, 0x39, 0x32, 0x30, 0x30, 0x10, 0x02, 0x2a, 0x2a, 0x0a, 0x11,
	0x50, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x4f, 0x54, 0x31, 0x51, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x4f, 0x54, 0x31, 0x41, 0x44, 0x10, 0x01, 0x2a, 0x1f, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x53, 0x50, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x50, 0x4c, 0x10, 0x01, 0x2a, 0x2e, 0x0a, 0x06, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4d, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x45, 0x4d, 0x45, 0x41, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x50, 0x41, 0x43, 0x10,
	0x02, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x52, 0x10, 0x03, 0x2a, 0x17, 0x0a, 0x08, 0x47, 0x65, 0x6f,
	0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x52, 0x59,
	0x10, 0x00, 0x2a, 0x47, 0x0a, 0x07, 0x56, 0x6e, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a,
	0x02, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x53, 0x44, 0x57, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4d, 0x5f, 0x43,
	0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x44, 0x57, 0x41,
	0x4e, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0x04, 0x32, 0xa6, 0x04, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x15, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x15,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x45, 0x0a, 0x14, 0x52, 0x65, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x15, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x0b, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x12,
	0x13, 0x2e, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x13,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x12, 0x1b, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x72,
	0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x44, 0x72, 0x69, 0x66, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x4a, 0x6f, 0x75, 0x72,
	0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x13, 0x2e, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61,
	0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x4a,
	0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x3a, 0x45, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xac, 0x96, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x56, 0x0a, 0x27, 0x63,
	0x6f, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69, 0x6e, 0x69, 0x78, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x77,
	0x68, 0x61, 0x6c, 0x65, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x5a, 0x27, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x71, 0x75, 0x69,
	0x6e, 0x69, 0x78, 0x2e, 0x62, 0x6c, 0x75, 0x65, 0x77, 0x68, 0x61, 0x6c, 0x65, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0xe0,
	0xb2, 0x19, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_network_service_configure_proto_rawDescOnce sync.Once
	file_network_service_configure_proto_rawDescData = file_network_service_configure_proto_rawDesc
)

func file_network_service_configure_proto_rawDescGZIP() []byte {
	file_network_service_configure_proto_rawDescOnce.Do(func() {
		file_network_service_configure_proto_rawDescData = protoimpl.X.CompressGZIP(file_network_service_configure_proto_rawDescData)
	})
	return file_network_service_configure_proto_rawDescData
}

var file_network_service_configure_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_network_service_configure_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_network_service_configure_proto_goTypes = []interface{}{
	(Status)(0),                        // 0: Status
	(Tpid)(0),                          // 1: Tpid
	(PortEncapsulation)(0),             // 2: PortEncapsulation
	(ServiceType)(0),                   // 3: ServiceType
	(Region)(0),                        // 4: Region
	(GeoScope)(0),                      // 5: GeoScope
	(VnfType)(0),                       // 6: VnfType
	(Switchport_Speed)(0),              // 7: Switchport.Speed
	(*Instance)(nil),                   // 8: Instance
	(*Switch)(nil),                     // 9: Switch
	(*Switchport)(nil),                 // 10: Switchport
	(*VlanPair)(nil),                   // 11: VlanPair
	(*LegacyVlan)(nil),                 // 12: LegacyVlan
	(*Vlan)(nil),                       // 13: Vlan
	(*MetalGateway)(nil),               // 14: MetalGateway
	(*VRF)(nil),                        // 15: VRF
	(*TrunkPort)(nil),                  // 16: TrunkPort
	(*Portchannel)(nil),                // 17: Portchannel
	(*Bgp)(nil),                        // 18: Bgp
	(*BgpNeighbor)(nil),                // 19: BgpNeighbor
	(*L3Bonded)(nil),                   // 20: L3Bonded
	(*L2Bonded)(nil),                   // 21: L2Bonded
	(*HybridBonded)(nil),               // 22: HybridBonded
	(*L2Unbonded)(nil),                 // 23: L2Unbonded
	(*HybridUnbonded)(nil),             // 24: HybridUnbonded
	(*Deprovision)(nil),                // 25: Deprovision
	(*Unenrolled)(nil),                 // 26: Unenrolled
	(*InstanceConfiguration)(nil),      // 27: InstanceConfiguration
	(*ProjectSwitchConfiguration)(nil), // 28: ProjectSwitchConfiguration
	(*NetworkMode)(nil),                // 29: NetworkMode
	(*Configuration)(nil),              // 30: Configuration
	(*ConfigurationRequest)(nil),       // 31: ConfigurationRequest
	(*JournalOnlyRequest)(nil),         // 32: JournalOnlyRequest
	(*Update)(nil),                     // 33: Update
	(*Notification)(nil),               // 34: Notification
	(*UpdateConfigStatusRequest)(nil),  // 35: UpdateConfigStatusRequest
	(*ConfigStatusMessage)(nil),        // 36: ConfigStatusMessage
	(*JournalOnlyResponse)(nil),        // 37: JournalOnlyResponse
	(*ConfigStatusRequest)(nil),        // 38: ConfigStatusRequest
	(*ReplaceConfigRequest)(nil),       // 39: ReplaceConfigRequest
	(*DriftDetectRequest)(nil),         // 40: DriftDetectRequest
	(*DriftDetectResponse)(nil),        // 41: DriftDetectResponse
	(*InstanceDriftDetectRequest)(nil), // 42: InstanceDriftDetectRequest
	(*ElasticIP)(nil),                  // 43: ElasticIP
	(*L2PortServiceRequest)(nil),       // 44: L2PortServiceRequest
	(*RequestHeaders)(nil),             // 45: RequestHeaders
	(*L2VPNServiceRequest)(nil),        // 46: L2VPNServiceRequest
	(*SiteProperties)(nil),             // 47: SiteProperties
	(*VnfInfo)(nil),                    // 48: VnfInfo
	nil,                                // 49: DriftDetectResponse.NotificationsEntry
	(*descriptorpb.FileOptions)(nil),   // 50: google.protobuf.FileOptions
}
var file_network_service_configure_proto_depIdxs = []int32{
	7,  // 0: Switchport.speed:type_name -> Switchport.Speed
	9,  // 1: Switchport.switch:type_name -> Switch
	12, // 2: Vlan.legacy_vlan:type_name -> LegacyVlan
	11, // 3: Vlan.vlan_pair:type_name -> VlanPair
	14, // 4: Vlan.metal_gateway:type_name -> MetalGateway
	15, // 5: MetalGateway.vrf:type_name -> VRF
	10, // 6: TrunkPort.switchport:type_name -> Switchport
	13, // 7: TrunkPort.trunked_vlans:type_name -> Vlan
	19, // 8: Bgp.v4:type_name -> BgpNeighbor
	19, // 9: Bgp.v6:type_name -> BgpNeighbor
	17, // 10: L3Bonded.portchannel:type_name -> Portchannel
	10, // 11: L3Bonded.interface_a:type_name -> Switchport
	10, // 12: L3Bonded.interface_b:type_name -> Switchport
	43, // 13: L3Bonded.elastic_ip:type_name -> ElasticIP
	18, // 14: L3Bonded.bgp:type_name -> Bgp
	17, // 15: L2Bonded.portchannel:type_name -> Portchannel
	10, // 16: L2Bonded.interface_a:type_name -> Switchport
	10, // 17: L2Bonded.interface_b:type_name -> Switchport
	13, // 18: L2Bonded.trunked_vlans:type_name -> Vlan
	17, // 19: HybridBonded.portchannel:type_name -> Portchannel
	10, // 20: HybridBonded.interface_a:type_name -> Switchport
	10, // 21: HybridBonded.interface_b:type_name -> Switchport
	13, // 22: HybridBonded.trunked_vlans:type_name -> Vlan
	43, // 23: HybridBonded.elastic_ip:type_name -> ElasticIP
	18, // 24: HybridBonded.bgp:type_name -> Bgp
	16, // 25: L2Unbonded.interface_a:type_name -> TrunkPort
	16, // 26: L2Unbonded.interface_b:type_name -> TrunkPort
	17, // 27: HybridUnbonded.portchannel:type_name -> Portchannel
	10, // 28: HybridUnbonded.interface_a:type_name -> Switchport
	16, // 29: HybridUnbonded.interface_b:type_name -> TrunkPort
	43, // 30: HybridUnbonded.elastic_ip:type_name -> ElasticIP
	18, // 31: HybridUnbonded.bgp:type_name -> Bgp
	17, // 32: Deprovision.portchannel:type_name -> Portchannel
	10, // 33: Deprovision.interface_a:type_name -> Switchport
	10, // 34: Deprovision.interface_b:type_name -> Switchport
	10, // 35: Unenrolled.interface_a:type_name -> Switchport
	10, // 36: Unenrolled.interface_b:type_name -> Switchport
	8,  // 37: InstanceConfiguration.instance:type_name -> Instance
	29, // 38: InstanceConfiguration.network_modes:type_name -> NetworkMode
	13, // 39: ProjectSwitchConfiguration.switch_vlans:type_name -> Vlan
	9,  // 40: ProjectSwitchConfiguration.device_a:type_name -> Switch
	9,  // 41: ProjectSwitchConfiguration.device_b:type_name -> Switch
	20, // 42: NetworkMode.l3_bonded_mode:type_name -> L3Bonded
	21, // 43: NetworkMode.l2_bonded_mode:type_name -> L2Bonded
	22, // 44: NetworkMode.hybrid_bonded_mode:type_name -> HybridBonded
	23, // 45: NetworkMode.l2_unbonded_mode:type_name -> L2Unbonded
	24, // 46: NetworkMode.hybrid_unbonded_mode:type_name -> HybridUnbonded
	25, // 47: NetworkMode.deprovision:type_name -> Deprovision
	26, // 48: NetworkMode.unenrolled:type_name -> Unenrolled
	27, // 49: Configuration.instance_config:type_name -> InstanceConfiguration
	28, // 50: Configuration.project_switch_config:type_name -> ProjectSwitchConfiguration
	44, // 51: Configuration.l2_port_config:type_name -> L2PortServiceRequest
	46, // 52: Configuration.l2_vpn_config:type_name -> L2VPNServiceRequest
	30, // 53: ConfigurationRequest.configuration:type_name -> Configuration
	30, // 54: JournalOnlyRequest.configuration:type_name -> Configuration
	33, // 55: Notification.updates:type_name -> Update
	0,  // 56: UpdateConfigStatusRequest.status:type_name -> Status
	0,  // 57: ConfigStatusMessage.status:type_name -> Status
	0,  // 58: JournalOnlyResponse.status:type_name -> Status
	30, // 59: ReplaceConfigRequest.current:type_name -> Configuration
	30, // 60: ReplaceConfigRequest.new:type_name -> Configuration
	30, // 61: DriftDetectRequest.intended:type_name -> Configuration
	49, // 62: DriftDetectResponse.notifications:type_name -> DriftDetectResponse.NotificationsEntry
	1,  // 63: L2PortServiceRequest.intTpid:type_name -> Tpid
	2,  // 64: L2PortServiceRequest.portEncapsulation:type_name -> PortEncapsulation
	3,  // 65: L2PortServiceRequest.serviceType:type_name -> ServiceType
	45, // 66: L2PortServiceRequest.requestHeaders:type_name -> RequestHeaders
	4,  // 67: RequestHeaders.region:type_name -> Region
	5,  // 68: L2VPNServiceRequest.geoScope:type_name -> GeoScope
	47, // 69: L2VPNServiceRequest.site:type_name -> SiteProperties
	48, // 70: SiteProperties.vnfInfo:type_name -> VnfInfo
	1,  // 71: SiteProperties.intTpid:type_name -> Tpid
	1,  // 72: SiteProperties.outerTpid:type_name -> Tpid
	1,  // 73: SiteProperties.innerTpid:type_name -> Tpid
	2,  // 74: SiteProperties.portEncapsulation:type_name -> PortEncapsulation
	6,  // 75: VnfInfo.vnfType:type_name -> VnfType
	34, // 76: DriftDetectResponse.NotificationsEntry.value:type_name -> Notification
	50, // 77: schema_version:extendee -> google.protobuf.FileOptions
	31, // 78: Configure.Configure:input_type -> ConfigurationRequest
	31, // 79: Configure.ConfigureAndSubscribe:input_type -> ConfigurationRequest
	35, // 80: Configure.UpdateConfigStatus:input_type -> UpdateConfigStatusRequest
	38, // 81: Configure.ConfigStatus:input_type -> ConfigStatusRequest
	39, // 82: Configure.ReplaceConfiguration:input_type -> ReplaceConfigRequest
	40, // 83: Configure.DriftDetect:input_type -> DriftDetectRequest
	42, // 84: Configure.InstanceDriftDetect:input_type -> InstanceDriftDetectRequest
	32, // 85: Configure.JournalOnly:input_type -> JournalOnlyRequest
	36, // 86: Configure.Configure:output_type -> ConfigStatusMessage
	36, // 87: Configure.ConfigureAndSubscribe:output_type -> ConfigStatusMessage
	36, // 88: Configure.UpdateConfigStatus:output_type -> ConfigStatusMessage
	36, // 89: Configure.ConfigStatus:output_type -> ConfigStatusMessage
	36, // 90: Configure.ReplaceConfiguration:output_type -> ConfigStatusMessage
	41, // 91: Configure.DriftDetect:output_type -> DriftDetectResponse
	41, // 92: Configure.InstanceDriftDetect:output_type -> DriftDetectResponse
	37, // 93: Configure.JournalOnly:output_type -> JournalOnlyResponse
	86, // [86:94] is the sub-list for method output_type
	78, // [78:86] is the sub-list for method input_type
	78, // [78:78] is the sub-list for extension type_name
	77, // [77:78] is the sub-list for extension extendee
	0,  // [0:77] is the sub-list for field type_name
}

func init() { file_network_service_configure_proto_init() }
func file_network_service_configure_proto_init() {
	if File_network_service_configure_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_network_service_configure_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Switchport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VlanPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegacyVlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetalGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrunkPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Portchannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bgp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BgpNeighbor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L3Bonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2Bonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridBonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2Unbonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridUnbonded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deprovision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unenrolled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProjectSwitchConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateConfigStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JournalOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplaceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriftDetectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DriftDetectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstanceDriftDetectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElasticIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2PortServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestHeaders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*L2VPNServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SiteProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_network_service_configure_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VnfInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_network_service_configure_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*Vlan_LegacyVlan)(nil),
		(*Vlan_VlanPair)(nil),
	}
	file_network_service_configure_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*NetworkMode_L3BondedMode)(nil),
		(*NetworkMode_L2BondedMode)(nil),
		(*NetworkMode_HybridBondedMode)(nil),
		(*NetworkMode_L2UnbondedMode)(nil),
		(*NetworkMode_HybridUnbondedMode)(nil),
		(*NetworkMode_Deprovision)(nil),
		(*NetworkMode_Unenrolled)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_network_service_configure_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   42,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_network_service_configure_proto_goTypes,
		DependencyIndexes: file_network_service_configure_proto_depIdxs,
		EnumInfos:         file_network_service_configure_proto_enumTypes,
		MessageInfos:      file_network_service_configure_proto_msgTypes,
		ExtensionInfos:    file_network_service_configure_proto_extTypes,
	}.Build()
	File_network_service_configure_proto = out.File
	file_network_service_configure_proto_rawDesc = nil
	file_network_service_configure_proto_goTypes = nil
	file_network_service_configure_proto_depIdxs = nil
}
